set nocompatible

" Syntax hilighting
set runtimepath+=~/.vim/dfplugins/vim-colors-solarized

" Rust support
set runtimepath+=~/.vim/dfplugins/rust.vim

" Pig support
set runtimepath+=~/.vim/dfplugins/pig.vim

syn on
set background=dark
colorscheme solarized

" Use full colour palette
set t_Co=256

set term=rxvt-unicode

" GUI stuff
if has("gui_running")
    " Get rid of GUI crap
    set guioptions=

    " Context-sensitive right click
    set mousemodel=popup_setpos

    "set columns=100

    " Remap F1 to Esc
    map <F1> <Esc>
    imap <F1> <Esc>

    " Windows specific settings
    if has('win32')
        " Use a better font
        set guifont=Consolas:h11:cANSI

        " Maximise window, unless told otherwise
        if !exists('g:no_maximize')
            au GUIEnter * simalt ~x
        endif
    endif
endif

" Line endings
set fileformats=unix,dos

" Line numbers/status
set number
set numberwidth=3
set ruler
set showcmd

" Learn to vim properly
set mouse=a " I failed.
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

" Indentation
set smartindent
set autoindent

" Text formatting options
set formatoptions=      " Reset format options
set formatoptions+=t    " Auto-wrap using textwidth
set formatoptions+=c    " Auto-wrap comments, add leader
set formatoptions+=r    " Automatically add comment leader on \n
set formatoptions+=o    " Automatically add comment leader on Oo
set formatoptions+=q    " Format comments when using gq
set formatoptions+=n    " Autoformat lists
set formatoptions+=2    " Use indent of second line of paragraph
if v:version >= 704 || (v:version == 703 && has('patch541'))
    set formatoptions+=j    " Remove comment leader when joining lines
endif

" Tab settings
set tabstop=4
set shiftwidth=4
set expandtab
set backspace=indent,eol,start
set softtabstop=4

" Observe modelines in files
set modeline
set modelines=5

" Highlight tabs and trailing whitespace
set listchars=tab:>-,trail:~
set list

" Better searching
set incsearch
set hlsearch
set ignorecase
set smartcase

" Better tab complete for files
set wildmenu
set wildmode=list:longest
set wildignore+=.metadata,.classpath,.project,.settings
set wildignore+=*.slo,*.lo,*.a,*.o,*.lai,*.a,*.dll,*.obj
set wildignore+=*.class,*.tokens,*.aux,*.log,*.pdf,*.toc
set wildignore+=.*.swp,.*.swo,*~,*.pyc,*.pyo,*.hi,*.bbl,*.out
set wildignore+=*.blg,*.fdb_latexmk,*.fls

" No need for a swap file
set noswapfile

" Allow undoing across sessions
if has('persistent_undo')
    set undodir=~/.vim/undofiles/
    set undofile
endif

" No splash
set shortmess+=I

" Don't redraw during macros
set lazyredraw

" Make the delay for Insert -> Command less noticable
" Eg. Multi-line editing and <Esc>O
set timeoutlen=1000
set ttimeoutlen=100

" Folding
set foldmethod=manual

" Rewrite typo'd commands
command! -bang -nargs=? -complete=file W w<bang> <args>
command! -bang -nargs=? -complete=file Wq wq<bang> <args>
command! -bang Q q<bang>
command! -bang Qa qa<bang>

" Autocompletion settings
set pumheight=7
set completeopt=longest,menu,preview

" Git commit settings
autocmd FileType gitcommit setlocal tw=79

" Make sure Makefiles actually work
autocmd FileType make setl noexpandtab

" Prefer markdown to modula2
autocmd BufRead,BufNewFile *.md setl filetype=markdown

" Couldn't find a syntax file for hive, so hilight as SQL
autocmd BufRead,BufNewFile *.hql setl filetype=sql

" PHP Settings
let php_sql_query = 1
let php_htmlInStrings = 1

" Rust settings
autocmd FileType tex,markdown setl spell
autocmd FileType tex,markdown setl textwidth=99
if exists('+colorcolumn')
    autocmd FileType tex,markdown setl colorcolumn=+1
else
    " TODO This should use tw rather than being hard coded
    autocmd FileType tex,markdown syntax match ErrorMsg /\%>99v.\+/
endif

" SQL Settings
let g:sql_type_default = 'mysql'

" Use LaTeX highlighting always
autocmd BufRead,BufNewFile *.tex setl filetype=tex

" Text file settings
autocmd FileType tex,markdown setl spell
autocmd FileType tex,markdown setl textwidth=79
if exists('+colorcolumn')
    autocmd FileType tex,markdown setl colorcolumn=+1
else
    " TODO This should use tw rather than being hard coded to 79
    autocmd FileType tex,markdown syntax match ErrorMsg /\%>79v.\+/
endif

if v:version >= 700
    " Syntax/etc checking
    set runtimepath+=~/.vim/dfplugins/syntastic
    let g:syntastic_check_on_open=1
    let g:syntastic_auto_loc_list=1
    let g:syntastic_loc_list_height=3

    " Autocomplete for java
    set runtimepath+=~/.vim/dfplugins/javacomplete
    autocmd FileType java setlocal omnifunc=javacomplete#Complete
    autocmd FileType java setlocal completefunc=javacomplete#CompleteParamsInfo

    " Autocomplete for Haskell
    normal !type ghc-mod >/dev/null 2>&1
    if v:shell_error == 0
        set runtimepath+=~/.vim/dfplugins/neco-ghc
        autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
        let neoghc_enable_detailed_browse = 1
    endif

    if has('python')
        " Conque settings
        set runtimepath+=~/.vim/dfplugins/conque

        command! Tt ConqueTermTab zsh
        command! Tv ConqueTermVSplit zsh
        command! Ts ConqueTermSplit zsh

        autocmd FileType conque_term setl nolist

        let g:ConqueTerm_InsertOnEnter = 1
        let g:ConqueTerm_ReadUnfocused = 1
        let g:ConqueTerm_StartMessages = 0
    endif

    " Git gutter
    if has('signs')
        set runtimepath+=~/.vim/dfplugins/gitgutter
    endif

endif

" Auto-completion.
" If using a recent enough version of vim, use YouCompleteMe
" Otherwise fallback to supertab and only support Java
if v:version >= 704 || (v:version == 703 && has('patch584'))
    if has('python')
        set runtimepath+=~/.vim/dfplugins/YouCompleteMe
        let g:ycm_global_ycm_extra_conf = '~/.vim/dfconf/YouCompleteMe/ycm_global.py'

        let g:ycm_filetype_blacklist={
            \ 'notes'       : 1,
            \ 'markdown'    : 1,
            \ 'text'        : 1,
            \ 'conque_term' : 1,
            \ 'gitcommit'   : 1,
        \}
    endif
else
    set runtimepath+=~/.vim/dfplugins/supertab

    " Supertab settings
    let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
    autocmd FileType * let b:SuperTabDisabled=1

    " Enable tab complete for java
    autocmd FileType java let b:SuperTabDisabled=0

endif
